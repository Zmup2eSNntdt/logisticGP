// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dummy
arma::rowvec dummy(arma::vec x, arma::vec y);
RcppExport SEXP _logisticGP_dummy(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dummy(x, y));
    return rcpp_result_gen;
END_RCPP
}
// colsums_cpp
arma::rowvec colsums_cpp(arma::mat A);
RcppExport SEXP _logisticGP_colsums_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(colsums_cpp(A));
    return rcpp_result_gen;
END_RCPP
}
// hBasis
arma::mat hBasis(arma::vec x, arma::vec knot);
RcppExport SEXP _logisticGP_hBasis(SEXP xSEXP, SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(hBasis(x, knot));
    return rcpp_result_gen;
END_RCPP
}
// PhiBasis
arma::mat PhiBasis(arma::vec x, arma::vec knot);
RcppExport SEXP _logisticGP_PhiBasis(SEXP xSEXP, SEXP knotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type knot(knotSEXP);
    rcpp_result_gen = Rcpp::wrap(PhiBasis(x, knot));
    return rcpp_result_gen;
END_RCPP
}
// logcond_likelihood_beta
List logcond_likelihood_beta(arma::mat xi, arma::mat beta, arma::mat tau, arma::mat h_loc, arma::mat X_new, arma::mat h_y, arma::vec test_knots);
RcppExport SEXP _logisticGP_logcond_likelihood_beta(SEXP xiSEXP, SEXP betaSEXP, SEXP tauSEXP, SEXP h_locSEXP, SEXP X_newSEXP, SEXP h_ySEXP, SEXP test_knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h_loc(h_locSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_new(X_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h_y(h_ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type test_knots(test_knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(logcond_likelihood_beta(xi, beta, tau, h_loc, X_new, h_y, test_knots));
    return rcpp_result_gen;
END_RCPP
}
// logcond_likelihood
List logcond_likelihood(arma::mat xi, arma::mat beta, arma::mat tau, arma::mat h_loc, arma::mat X_new, arma::mat h_y, arma::vec test_knots, arma::mat H_Z);
RcppExport SEXP _logisticGP_logcond_likelihood(SEXP xiSEXP, SEXP betaSEXP, SEXP tauSEXP, SEXP h_locSEXP, SEXP X_newSEXP, SEXP h_ySEXP, SEXP test_knotsSEXP, SEXP H_ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h_loc(h_locSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_new(X_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type h_y(h_ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type test_knots(test_knotsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H_Z(H_ZSEXP);
    rcpp_result_gen = Rcpp::wrap(logcond_likelihood(xi, beta, tau, h_loc, X_new, h_y, test_knots, H_Z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_logisticGP_dummy", (DL_FUNC) &_logisticGP_dummy, 2},
    {"_logisticGP_colsums_cpp", (DL_FUNC) &_logisticGP_colsums_cpp, 1},
    {"_logisticGP_hBasis", (DL_FUNC) &_logisticGP_hBasis, 2},
    {"_logisticGP_PhiBasis", (DL_FUNC) &_logisticGP_PhiBasis, 2},
    {"_logisticGP_logcond_likelihood_beta", (DL_FUNC) &_logisticGP_logcond_likelihood_beta, 7},
    {"_logisticGP_logcond_likelihood", (DL_FUNC) &_logisticGP_logcond_likelihood, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_logisticGP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
